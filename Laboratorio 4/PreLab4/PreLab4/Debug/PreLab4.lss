
PreLab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000196  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000122  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000196  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000196  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000078f  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006bf  00000000  00000000  000009c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002dd  00000000  00000000  00001086  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00001364  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003bb  00000000  00000000  000013a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000090  00000000  00000000  00001763  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  000017f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 8a 00 	call	0x114	; 0x114 <main>
  88:	0c 94 8f 00 	jmp	0x11e	; 0x11e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <setup>:
    }
}


void setup(void){
	UCSR0B = 0;		// DESABILITA TX Y RX
  90:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	DDRB = 255;		// PUERTO B COMO SALIDA
  94:	8f ef       	ldi	r24, 0xFF	; 255
  96:	84 b9       	out	0x04, r24	; 4
	DDRD = 255;		// PUERTO D COMO SALIDA
  98:	8a b9       	out	0x0a, r24	; 10
	PORTC = 6;		// PIN PC0 Y PC1 PULL-UP
  9a:	86 e0       	ldi	r24, 0x06	; 6
  9c:	88 b9       	out	0x08, r24	; 8
	DDRC = 248;		// PIN PC0, PC1 Y PC2 COMO ENTRADA
  9e:	88 ef       	ldi	r24, 0xF8	; 248
  a0:	87 b9       	out	0x07, r24	; 7
	
	// VALORES INICIALES
	PORTB = 0;
  a2:	15 b8       	out	0x05, r1	; 5
	PORTD = 0;
  a4:	1b b8       	out	0x0b, r1	; 11
	PORTC |= (1 << PORTC3);
  a6:	88 b1       	in	r24, 0x08	; 8
  a8:	88 60       	ori	r24, 0x08	; 8
  aa:	88 b9       	out	0x08, r24	; 8
	PORTC &=~(1 << PORTC4);
  ac:	88 b1       	in	r24, 0x08	; 8
  ae:	8f 7e       	andi	r24, 0xEF	; 239
  b0:	88 b9       	out	0x08, r24	; 8
  b2:	08 95       	ret

000000b4 <buton>:
}

void buton(void){
	if ((PINC & (1 << PINC1)) == 0){
  b4:	31 99       	sbic	0x06, 1	; 6
  b6:	14 c0       	rjmp	.+40     	; 0xe0 <buton+0x2c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b8:	2f ef       	ldi	r18, 0xFF	; 255
  ba:	83 ec       	ldi	r24, 0xC3	; 195
  bc:	99 e0       	ldi	r25, 0x09	; 9
  be:	21 50       	subi	r18, 0x01	; 1
  c0:	80 40       	sbci	r24, 0x00	; 0
  c2:	90 40       	sbci	r25, 0x00	; 0
  c4:	e1 f7       	brne	.-8      	; 0xbe <buton+0xa>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <buton+0x14>
  c8:	00 00       	nop
		_delay_ms(200);					//VALIDA LA PULSACION
		if ((PINC & (1 << PINC1)) == 2){
  ca:	31 9b       	sbis	0x06, 1	; 6
  cc:	09 c0       	rjmp	.+18     	; 0xe0 <buton+0x2c>
			CONT++;						//INCREMENTA
  ce:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  d2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  d6:	01 96       	adiw	r24, 0x01	; 1
  d8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  dc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}else{CONT = CONT;}
	}
	if ((PINC & (1 << PINC2)) == 0)	{
  e0:	32 99       	sbic	0x06, 2	; 6
  e2:	14 c0       	rjmp	.+40     	; 0x10c <buton+0x58>
  e4:	2f ef       	ldi	r18, 0xFF	; 255
  e6:	83 ec       	ldi	r24, 0xC3	; 195
  e8:	99 e0       	ldi	r25, 0x09	; 9
  ea:	21 50       	subi	r18, 0x01	; 1
  ec:	80 40       	sbci	r24, 0x00	; 0
  ee:	90 40       	sbci	r25, 0x00	; 0
  f0:	e1 f7       	brne	.-8      	; 0xea <buton+0x36>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <buton+0x40>
  f4:	00 00       	nop
		_delay_ms(200);					//VALIDA LA PULSACION
		if ((PINC & (1 << PINC2)) == 4){
  f6:	32 9b       	sbis	0x06, 2	; 6
  f8:	09 c0       	rjmp	.+18     	; 0x10c <buton+0x58>
			CONT--;						//DECREMENTA
  fa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  fe:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 108:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}else{CONT = CONT;}
	}
	PORTB = CONT;	
 10c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 110:	85 b9       	out	0x05, r24	; 5
 112:	08 95       	ret

00000114 <main>:

void setup(void);
void buton(void);

int main(void){
	setup();	
 114:	0e 94 48 00 	call	0x90	; 0x90 <setup>
     while (1) {
		//FUNCION DE BOTON
		buton();
 118:	0e 94 5a 00 	call	0xb4	; 0xb4 <buton>
 11c:	fd cf       	rjmp	.-6      	; 0x118 <main+0x4>

0000011e <_exit>:
 11e:	f8 94       	cli

00000120 <__stop_program>:
 120:	ff cf       	rjmp	.-2      	; 0x120 <__stop_program>
