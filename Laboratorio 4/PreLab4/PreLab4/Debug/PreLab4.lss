
PreLab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  0000028e  00000322  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000028e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800120  00800120  00000342  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000342  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000374  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000003b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000844  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006fa  00000000  00000000  00000c48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ef  00000000  00000000  00001342  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c4  00000000  00000000  00001734  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003de  00000000  00000000  000017f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000156  00000000  00000000  00001bd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001d2c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e8       	ldi	r30, 0x8E	; 142
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 32       	cpi	r26, 0x20	; 32
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e2       	ldi	r26, 0x20	; 32
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 32       	cpi	r26, 0x26	; 38
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 c2 00 	call	0x184	; 0x184 <main>
  9e:	0c 94 45 01 	jmp	0x28a	; 0x28a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setup>:
		}
    }
}

void setup(void){
	UCSR0B = 0;		// DESABILITA TX Y RX
  a6:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	DDRB = 255;		// PUERTO B COMO SALIDA
  aa:	8f ef       	ldi	r24, 0xFF	; 255
  ac:	84 b9       	out	0x04, r24	; 4
	DDRD = 255;		// PUERTO D COMO SALIDA
  ae:	8a b9       	out	0x0a, r24	; 10
	PORTC = 6;		// PIN PC0 Y PC1 PULL-UP
  b0:	86 e0       	ldi	r24, 0x06	; 6
  b2:	88 b9       	out	0x08, r24	; 8
	DDRC = 248;		// PIN PC0, PC1 Y PC2 COMO ENTRADA
  b4:	88 ef       	ldi	r24, 0xF8	; 248
  b6:	87 b9       	out	0x07, r24	; 7
	
	// VALORES INICIALES
	PORTB = 0;
  b8:	15 b8       	out	0x05, r1	; 5
	PORTD = 0;
  ba:	1b b8       	out	0x0b, r1	; 11
	PORTC |= (1 << PORTC3);
  bc:	88 b1       	in	r24, 0x08	; 8
  be:	88 60       	ori	r24, 0x08	; 8
  c0:	88 b9       	out	0x08, r24	; 8
	PORTC &=~(1 << PORTC4);
  c2:	88 b1       	in	r24, 0x08	; 8
  c4:	8f 7e       	andi	r24, 0xEF	; 239
  c6:	88 b9       	out	0x08, r24	; 8
  c8:	08 95       	ret

000000ca <initADC>:
}

void initADC(void){
	ADMUX = 0;					// ADC0
  ca:	ec e7       	ldi	r30, 0x7C	; 124
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	10 82       	st	Z, r1
	ADMUX |= (1 << REFS0);		// VREF = AVCC
  d0:	80 81       	ld	r24, Z
  d2:	80 64       	ori	r24, 0x40	; 64
  d4:	80 83       	st	Z, r24
	ADMUX &= ~(1 << REFS1);		// VREF = AVCC
  d6:	80 81       	ld	r24, Z
  d8:	8f 77       	andi	r24, 0x7F	; 127
  da:	80 83       	st	Z, r24
	ADMUX |= (1 << ADLAR);		// JUSTIFICACION A LA DERECHA
  dc:	80 81       	ld	r24, Z
  de:	80 62       	ori	r24, 0x20	; 32
  e0:	80 83       	st	Z, r24
	
	ADCSRA = 0;
  e2:	ea e7       	ldi	r30, 0x7A	; 122
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	10 82       	st	Z, r1
	ADCSRA |= (1 << ADEN);		// ENCIENDER EL ADC
  e8:	80 81       	ld	r24, Z
  ea:	80 68       	ori	r24, 0x80	; 128
  ec:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE);		// HABILITAR ISR ADC
  ee:	80 81       	ld	r24, Z
  f0:	88 60       	ori	r24, 0x08	; 8
  f2:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS0);		
  f4:	80 81       	ld	r24, Z
  f6:	81 60       	ori	r24, 0x01	; 1
  f8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS1);		
  fa:	80 81       	ld	r24, Z
  fc:	82 60       	ori	r24, 0x02	; 2
  fe:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS2);		// PRESCALES 128 -> 16M = 125kHz
 100:	80 81       	ld	r24, Z
 102:	84 60       	ori	r24, 0x04	; 4
 104:	80 83       	st	Z, r24
	
	DIDR0 |= (1 << ADC0D);		// DESABILITAR LA ENTRADA DIGITAL PC0
 106:	ee e7       	ldi	r30, 0x7E	; 126
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	81 60       	ori	r24, 0x01	; 1
 10e:	80 83       	st	Z, r24
 110:	08 95       	ret

00000112 <initTimer0>:
}

void initTimer0(void){
	TCCR0A = 0;		//MODO NORMAL
 112:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 5;		//PRESCALER
 114:	85 e0       	ldi	r24, 0x05	; 5
 116:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = 1;		//HABILITA TOIE0
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	TCNT0 = 99;		//VALOR INICIAL
 11e:	83 e6       	ldi	r24, 0x63	; 99
 120:	86 bd       	out	0x26, r24	; 38
 122:	08 95       	ret

00000124 <buton>:
}

void buton(void){
	if ((PINC & (1 << PINC1)) == 0){
 124:	31 99       	sbic	0x06, 1	; 6
 126:	14 c0       	rjmp	.+40     	; 0x150 <buton+0x2c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 128:	2f ef       	ldi	r18, 0xFF	; 255
 12a:	83 ec       	ldi	r24, 0xC3	; 195
 12c:	99 e0       	ldi	r25, 0x09	; 9
 12e:	21 50       	subi	r18, 0x01	; 1
 130:	80 40       	sbci	r24, 0x00	; 0
 132:	90 40       	sbci	r25, 0x00	; 0
 134:	e1 f7       	brne	.-8      	; 0x12e <buton+0xa>
 136:	00 c0       	rjmp	.+0      	; 0x138 <buton+0x14>
 138:	00 00       	nop
		_delay_ms(200);					//VALIDA LA PULSACION
		if ((PINC & (1 << PINC1)) == 2){
 13a:	31 9b       	sbis	0x06, 1	; 6
 13c:	09 c0       	rjmp	.+18     	; 0x150 <buton+0x2c>
			CONT++;						//INCREMENTA
 13e:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <CONT>
 142:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <CONT+0x1>
 146:	01 96       	adiw	r24, 0x01	; 1
 148:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <CONT+0x1>
 14c:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <CONT>
		}else{CONT = CONT;}
	}
	if ((PINC & (1 << PINC2)) == 0)	{
 150:	32 99       	sbic	0x06, 2	; 6
 152:	14 c0       	rjmp	.+40     	; 0x17c <buton+0x58>
 154:	2f ef       	ldi	r18, 0xFF	; 255
 156:	83 ec       	ldi	r24, 0xC3	; 195
 158:	99 e0       	ldi	r25, 0x09	; 9
 15a:	21 50       	subi	r18, 0x01	; 1
 15c:	80 40       	sbci	r24, 0x00	; 0
 15e:	90 40       	sbci	r25, 0x00	; 0
 160:	e1 f7       	brne	.-8      	; 0x15a <buton+0x36>
 162:	00 c0       	rjmp	.+0      	; 0x164 <buton+0x40>
 164:	00 00       	nop
		_delay_ms(200);					//VALIDA LA PULSACION
		if ((PINC & (1 << PINC2)) == 4){
 166:	32 9b       	sbis	0x06, 2	; 6
 168:	09 c0       	rjmp	.+18     	; 0x17c <buton+0x58>
			CONT--;						//DECREMENTA
 16a:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <CONT>
 16e:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <CONT+0x1>
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <CONT+0x1>
 178:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <CONT>
		}else{CONT = CONT;}
	}
	PORTB = CONT;	
 17c:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <CONT>
 180:	85 b9       	out	0x05, r24	; 5
 182:	08 95       	ret

00000184 <main>:
void setup(void);
void buton(void);

int main(void)
{
	cli();
 184:	f8 94       	cli
	setup();	
 186:	0e 94 53 00 	call	0xa6	; 0xa6 <setup>
	initADC();
 18a:	0e 94 65 00 	call	0xca	; 0xca <initADC>
	initTimer0();
 18e:	0e 94 89 00 	call	0x112	; 0x112 <initTimer0>
	sei();
 192:	78 94       	sei
     while (1) 
    {
		//FUNCION DE BOTON
		buton();
 194:	0e 94 92 00 	call	0x124	; 0x124 <buton>
		//COMPARACION ENTRE CONTADOR Y ADC
		if (CONT == ADCH){
 198:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <CONT>
 1a2:	30 91 25 01 	lds	r19, 0x0125	; 0x800125 <CONT+0x1>
 1a6:	82 17       	cp	r24, r18
 1a8:	93 07       	cpc	r25, r19
 1aa:	21 f4       	brne	.+8      	; 0x1b4 <main+0x30>
			PORTC |= (1 << PORTC5); //SI SON IGUALES
 1ac:	88 b1       	in	r24, 0x08	; 8
 1ae:	80 62       	ori	r24, 0x20	; 32
 1b0:	88 b9       	out	0x08, r24	; 8
 1b2:	f0 cf       	rjmp	.-32     	; 0x194 <main+0x10>
		}else{
			PORTC &=~(1 << PORTC5);	//SI NO SON IGUALES
 1b4:	88 b1       	in	r24, 0x08	; 8
 1b6:	8f 7d       	andi	r24, 0xDF	; 223
 1b8:	88 b9       	out	0x08, r24	; 8
 1ba:	ec cf       	rjmp	.-40     	; 0x194 <main+0x10>

000001bc <__vector_21>:
		}else{CONT = CONT;}
	}
	PORTB = CONT;	
}

ISR(ADC_vect){
 1bc:	1f 92       	push	r1
 1be:	0f 92       	push	r0
 1c0:	0f b6       	in	r0, 0x3f	; 63
 1c2:	0f 92       	push	r0
 1c4:	11 24       	eor	r1, r1
 1c6:	8f 93       	push	r24
 1c8:	9f 93       	push	r25
 1ca:	ef 93       	push	r30
 1cc:	ff 93       	push	r31
	D1 = (ADCH & 15);		//NIBLE BAJO
 1ce:	e9 e7       	ldi	r30, 0x79	; 121
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	80 81       	ld	r24, Z
 1d4:	8f 70       	andi	r24, 0x0F	; 15
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <D1+0x1>
 1dc:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <D1>
	D2 = (ADCH & 240);	
 1e0:	80 81       	ld	r24, Z
 1e2:	80 7f       	andi	r24, 0xF0	; 240
 1e4:	90 e0       	ldi	r25, 0x00	; 0
	D2 = D2 >> 4;			//NIBLE BAJO
 1e6:	95 95       	asr	r25
 1e8:	87 95       	ror	r24
 1ea:	95 95       	asr	r25
 1ec:	87 95       	ror	r24
 1ee:	95 95       	asr	r25
 1f0:	87 95       	ror	r24
 1f2:	95 95       	asr	r25
 1f4:	87 95       	ror	r24
 1f6:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <__data_end+0x1>
 1fa:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
	ADCSRA |= (1 << ADIF);	//LIMPIA LA BANDERA
 1fe:	ea e7       	ldi	r30, 0x7A	; 122
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	80 81       	ld	r24, Z
 204:	80 61       	ori	r24, 0x10	; 16
 206:	80 83       	st	Z, r24
}
 208:	ff 91       	pop	r31
 20a:	ef 91       	pop	r30
 20c:	9f 91       	pop	r25
 20e:	8f 91       	pop	r24
 210:	0f 90       	pop	r0
 212:	0f be       	out	0x3f, r0	; 63
 214:	0f 90       	pop	r0
 216:	1f 90       	pop	r1
 218:	18 95       	reti

0000021a <__vector_16>:

ISR(TIMER0_OVF_vect){
 21a:	1f 92       	push	r1
 21c:	0f 92       	push	r0
 21e:	0f b6       	in	r0, 0x3f	; 63
 220:	0f 92       	push	r0
 222:	11 24       	eor	r1, r1
 224:	8f 93       	push	r24
 226:	9f 93       	push	r25
 228:	ef 93       	push	r30
 22a:	ff 93       	push	r31
	ADCSRA |= (1 << ADSC);			//INICIA EL ADC
 22c:	ea e7       	ldi	r30, 0x7A	; 122
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	80 81       	ld	r24, Z
 232:	80 64       	ori	r24, 0x40	; 64
 234:	80 83       	st	Z, r24
	PORTC ^= (1 << PORTC3);			//CAMBIA EL VALOR PC3
 236:	98 b1       	in	r25, 0x08	; 8
 238:	88 e0       	ldi	r24, 0x08	; 8
 23a:	89 27       	eor	r24, r25
 23c:	88 b9       	out	0x08, r24	; 8
	PORTC ^= (1 << PORTC4);			//CAMBIA EL VALOR PC4
 23e:	98 b1       	in	r25, 0x08	; 8
 240:	80 e1       	ldi	r24, 0x10	; 16
 242:	89 27       	eor	r24, r25
 244:	88 b9       	out	0x08, r24	; 8
	if ((PORTC & (1 << PINC3)) == 8){
 246:	43 9b       	sbis	0x08, 3	; 8
 248:	0b c0       	rjmp	.+22     	; 0x260 <__vector_16+0x46>
		PORTD = DISPLAY[D1];		//DISPLAY 1
 24a:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <D1>
 24e:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <D1+0x1>
 252:	ee 0f       	add	r30, r30
 254:	ff 1f       	adc	r31, r31
 256:	e0 50       	subi	r30, 0x00	; 0
 258:	ff 4f       	sbci	r31, 0xFF	; 255
 25a:	80 81       	ld	r24, Z
 25c:	8b b9       	out	0x0b, r24	; 11
 25e:	0a c0       	rjmp	.+20     	; 0x274 <__vector_16+0x5a>
	}else{
		PORTD = DISPLAY[D2];		//DISPLAY 2
 260:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <__data_end>
 264:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <__data_end+0x1>
 268:	ee 0f       	add	r30, r30
 26a:	ff 1f       	adc	r31, r31
 26c:	e0 50       	subi	r30, 0x00	; 0
 26e:	ff 4f       	sbci	r31, 0xFF	; 255
 270:	80 81       	ld	r24, Z
 272:	8b b9       	out	0x0b, r24	; 11
	}
	TCNT0 = 99;						//VALOR INICIAL
 274:	83 e6       	ldi	r24, 0x63	; 99
 276:	86 bd       	out	0x26, r24	; 38
}
 278:	ff 91       	pop	r31
 27a:	ef 91       	pop	r30
 27c:	9f 91       	pop	r25
 27e:	8f 91       	pop	r24
 280:	0f 90       	pop	r0
 282:	0f be       	out	0x3f, r0	; 63
 284:	0f 90       	pop	r0
 286:	1f 90       	pop	r1
 288:	18 95       	reti

0000028a <_exit>:
 28a:	f8 94       	cli

0000028c <__stop_program>:
 28c:	ff cf       	rjmp	.-2      	; 0x28c <__stop_program>
